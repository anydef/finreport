//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.12

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "transaction_categories")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub reference: String,
    pub category_id: Option<i32>,
    pub reasoning: Option<String>,
    #[sea_orm(column_type = "Double", nullable)]
    pub confidence: Option<f64>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::categories::Entity",
        from = "Column::CategoryId",
        to = "super::categories::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Categories,
    #[sea_orm(
        belongs_to = "super::transactions::Entity",
        from = "Column::Reference",
        to = "super::transactions::Column::Reference",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Transactions,
}

impl Related<super::categories::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Categories.def()
    }
}

impl Related<super::transactions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Transactions.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
